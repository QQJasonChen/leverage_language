name: Automated Backup Workflow

on:
  # Trigger on push to main branch
  push:
    branches: [ main ]
  
  # Trigger on pull request
  pull_request:
    branches: [ main ]
  
  # Schedule daily backup at 2 AM UTC (10 AM Taiwan time)
  schedule:
    - cron: '0 2 * * *'
  
  # Allow manual trigger
  workflow_dispatch:

jobs:
  backup:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for backup
    
    - name: Setup Node.js (if needed for future builds)
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Create backup timestamp
      id: timestamp
      run: |
        echo "timestamp=$(date +'%Y-%m-%d_%H-%M-%S')" >> $GITHUB_OUTPUT
        echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
    
    - name: Generate backup report
      run: |
        echo "# YouGlish Extension Backup Report" > backup-report.md
        echo "**Backup Date:** $(date)" >> backup-report.md
        echo "**Commit Hash:** ${{ github.sha }}" >> backup-report.md
        echo "" >> backup-report.md
        echo "## Repository Statistics" >> backup-report.md
        echo "- **Total Files:** $(find . -type f | wc -l)" >> backup-report.md
        echo "- **Code Files:** $(find . -name "*.js" -o -name "*.html" -o -name "*.css" -o -name "*.json" | wc -l)" >> backup-report.md
        echo "- **Total Size:** $(du -sh . | cut -f1)" >> backup-report.md
        echo "" >> backup-report.md
        echo "## Recent Changes" >> backup-report.md
        git log --oneline -5 >> backup-report.md
        echo "" >> backup-report.md
        echo "## File Structure" >> backup-report.md
        tree -I 'node_modules|.git' -L 2 >> backup-report.md || ls -la >> backup-report.md
    
    - name: Upload backup report as artifact
      uses: actions/upload-artifact@v3
      with:
        name: backup-report-${{ steps.timestamp.outputs.date }}
        path: backup-report.md
        retention-days: 90
    
    - name: Validate extension files
      run: |
        echo "Validating extension structure..."
        
        # Check required files exist
        required_files=("manifest.json" "background.js" "sidepanel.js" "sidepanel.html")
        for file in "${required_files[@]}"; do
          if [ -f "$file" ]; then
            echo "✅ $file exists"
          else
            echo "❌ $file missing"
            exit 1
          fi
        done
        
        # Validate manifest.json
        if command -v node &> /dev/null; then
          echo "Validating manifest.json..."
          node -e "JSON.parse(require('fs').readFileSync('manifest.json', 'utf8')); console.log('✅ manifest.json is valid JSON');"
        fi
    
    - name: Create release on tag push
      if: startsWith(github.ref, 'refs/tags/v')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: YouGlish Extension ${{ github.ref }}
        body: |
          Automated backup and release of YouGlish Chrome Extension.
          
          ## Changes
          See commit history for detailed changes.
          
          ## Installation
          1. Download the source code
          2. Extract to a folder
          3. Load unpacked extension in Chrome
        draft: false
        prerelease: false

  notification:
    runs-on: ubuntu-latest
    needs: backup
    if: always()
    
    steps:
    - name: Notify backup status
      run: |
        if [ "${{ needs.backup.result }}" == "success" ]; then
          echo "✅ Backup completed successfully"
          echo "Repository: ${{ github.repository }}"
          echo "Commit: ${{ github.sha }}"
          echo "Timestamp: $(date)"
        else
          echo "❌ Backup failed"
          echo "Please check the workflow logs"
        fi